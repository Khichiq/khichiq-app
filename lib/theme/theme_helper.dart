import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray100,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray200,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 16.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray700,
          fontSize: 14.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray700,
          fontSize: 12.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 32.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray700,
          fontSize: 12.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray500,
          fontSize: 10.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 21.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 16.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 14.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF4A8AF8),
    secondaryContainer: Color(0XFF0DB561),

    // On colors(text colors)
    onPrimary: Color(0XE519263E),
    onPrimaryContainer: Color(0XFFCDD2E1),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amberA200 => Color(0XFFFFDD40);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue200 => Color(0XFF97D5FF);
  Color get blue300 => Color(0XFF64B5F6);
  Color get blue800 => Color(0XFF0053BF);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray200 => Color(0XFFAFB4C8);
  Color get blueGray300 => Color(0XFF909AB7);
  Color get blueGray30001 => Color(0XFF8F9AB6);
  Color get blueGray50 => Color(0XFFF1F1F1);
  Color get blueGray700 => Color(0XFF56415E);
  Color get blueGray900 => Color(0XFF333333);

  // Cyan
  Color get cyanA100 => Color(0XFF8CF6E8);

  // Gray
  Color get gray100 => Color(0XFFF4F5F9);
  Color get gray200 => Color(0XFFEBEBEB);
  Color get gray300 => Color(0XFFE1E1E1);
  Color get gray30001 => Color(0XFFDADADA);
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray50 => Color(0XFFFAFAFA);
  Color get gray500 => Color(0XFF999999);
  Color get gray700 => Color(0XFF666666);
  Color get gray800 => Color(0XFF454545);

  // Green
  Color get green400 => Color(0XFF5EDD60);
  Color get green40001 => Color(0XFF54CC61);
  Color get green600 => Color(0XFF27AE60);
  Color get greenA700 => Color(0XFF00B502);
  Color get greenA70028 => Color(0X2800B603);

  // Indigo
  Color get indigo100 => Color(0XFFCBD2E5);
  Color get indigo50 => Color(0XFFE4E7F3);
  Color get indigo5001 => Color(0XFFE9EDF5);
  Color get indigoA200 => Color(0XFF4A7AFF);

  // LightBlue
  Color get lightBlue50 => Color(0XFFE2F4FF);
  Color get lightBlue500 => Color(0XFF12A8FD);

  // Orange
  Color get orange500 => Color(0XFFFF9900);
  Color get orange600 => Color(0XFFEF9309);
  Color get orangeA700 => Color(0XFFFE6A16);

  // Pink
  Color get pink500 => Color(0XFFFB1C5F);
  Color get pink50001 => Color(0XFFFA1C5E);

  // Red
  Color get red200 => Color(0XFFDBA783);
  Color get red500 => Color(0XFFF44336);
  Color get red600 => Color(0XFFF03636);

  // Teal
  Color get tealA100 => Color(0XFFB4FFFB);
  Color get tealA10001 => Color(0XFFA1FDF3);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);

  // Yellow
  Color get yellowA700 => Color(0XFFFED400);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
